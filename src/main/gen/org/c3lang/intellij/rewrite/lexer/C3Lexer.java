// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: C3.flex

package org.c3lang.intellij.rewrite.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static org.c3lang.intellij.rewrite.psi.C3Types.*;


class C3Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOC_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\0\1\17\1\0\1\20\1\21\12\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\6\32"+
    "\21\33\1\34\2\33\1\35\1\36\1\37\1\0\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\2\50"+
    "\1\51\2\50\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\2\50\1\64\2\50\1\65"+
    "\1\0\1\66\7\0\1\3\u01da\0\12\67\206\0\12\67"+
    "\306\0\12\67\234\0\12\67\166\0\12\67\140\0\12\67"+
    "\166\0\12\67\106\0\12\67\u0116\0\12\67\106\0\12\67"+
    "\u0146\0\12\67\46\0\12\67\u012c\0\12\67\200\0\12\67"+
    "\246\0\12\67\6\0\12\67\266\0\12\67\126\0\12\67"+
    "\206\0\12\67\6\0\12\67\316\0\2\3\u01a6\0\12\67"+
    "\46\0\12\67\306\0\12\67\26\0\12\67\126\0\12\67"+
    "\u0196\0\12\67\6\0\u0100\3\240\0\12\67\206\0\12\67"+
    "\u012c\0\12\67\200\0\12\67\74\0\12\67\220\0\12\67"+
    "\166\0\12\67\146\0\12\67\206\0\12\67\106\0\12\67"+
    "\266\0\12\67\u0164\0\62\67\100\0\12\67\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\2\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\1\1\21\1\22\1\1"+
    "\10\4\1\23\1\24\3\25\2\4\1\25\1\1\1\25"+
    "\1\13\1\15\3\25\10\4\1\26\1\27\1\0\1\30"+
    "\1\0\2\4\1\0\1\31\1\12\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\0\5\4\1\41\7\4"+
    "\1\0\1\27\1\30\1\0\1\25\2\4\1\42\1\25"+
    "\1\34\1\35\4\25\1\0\1\25\5\4\1\41\10\4"+
    "\1\43\1\44\15\4\1\43\1\31\5\25\16\4\1\45"+
    "\1\46\12\4\6\25\1\4\1\45\1\46\12\4\1\47"+
    "\4\4\1\50\3\4\1\51\1\4\3\25\1\52\2\25"+
    "\1\47\4\4\1\50\3\4\1\51\1\53\1\54\1\4"+
    "\1\55\1\56\1\57\1\60\1\61\1\53\2\25\1\62"+
    "\2\25\1\54\1\4\1\55\1\56\1\57\1\60\1\61"+
    "\1\4\1\25\1\63\1\25\1\64\1\4\1\65\1\25"+
    "\1\66\1\65\2\25\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\160\0\u01c0\0\160\0\160\0\160\0\160\0\u01f8\0\u0230"+
    "\0\u0268\0\160\0\u02a0\0\u02d8\0\u0310\0\160\0\u0348\0\160"+
    "\0\160\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\160\0\160\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0578\0\u0738\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\u09a0\0\160\0\160\0\u0118\0\160\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\u0348\0\u0380\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0150\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0578\0\u0578\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\160\0\u0f18\0\u0578\0\u0578\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u0620"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340"+
    "\0\u0150\0\160\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u0620"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u0150\0\u0150\0\u1ab0\0\u1ae8"+
    "\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u0620"+
    "\0\u0620\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\u1ff0\0\u2028\0\u2060\0\u0150\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u0150\0\u2178\0\u21b0\0\u21e8\0\u0150\0\u2220\0\u2258\0\u2290"+
    "\0\u22c8\0\u0578\0\u2300\0\u2338\0\u0620\0\u2370\0\u23a8\0\u23e0"+
    "\0\u2418\0\u0620\0\u2450\0\u2488\0\u24c0\0\u0620\0\u0150\0\u0150"+
    "\0\u24f8\0\u0150\0\u0150\0\u0150\0\u0150\0\u0150\0\u0620\0\u2530"+
    "\0\u2568\0\u0578\0\u25a0\0\u25d8\0\u0620\0\u2610\0\u0620\0\u0620"+
    "\0\u0620\0\u0620\0\u0620\0\u2648\0\u2680\0\u0578\0\u26b8\0\u0578"+
    "\0\u26f0\0\u0150\0\u2728\0\u0578\0\u0620\0\u2760\0\u2798\0\u0578";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\3\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\3\7\1\30\1\3\1\31\1\3\1\32\2\7"+
    "\1\33\1\7\1\34\1\35\1\7\1\36\1\7\1\37"+
    "\4\7\1\40\1\41\1\7\1\42\1\7\1\43\1\44"+
    "\1\20\6\45\1\46\1\47\1\50\1\51\1\45\1\52"+
    "\2\45\1\53\2\45\1\54\1\45\1\55\1\45\1\56"+
    "\1\57\1\25\1\45\1\60\3\50\3\45\1\50\1\61"+
    "\2\50\1\62\1\50\1\63\1\64\1\50\1\65\1\50"+
    "\1\66\4\50\1\67\1\70\1\50\1\71\1\50\3\45"+
    "\71\0\2\4\1\0\1\4\71\0\1\72\17\0\1\73"+
    "\41\0\7\74\1\75\26\74\1\76\31\74\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\23\7\2\0\1\7"+
    "\22\0\1\7\7\0\3\7\3\0\1\7\1\0\4\7"+
    "\1\77\2\7\1\100\13\7\2\0\1\7\13\101\1\0"+
    "\54\101\21\0\1\102\70\0\1\103\7\0\1\103\1\0"+
    "\1\103\5\0\6\103\14\0\1\103\2\0\1\103\23\0"+
    "\1\104\62\0\1\105\7\0\1\106\67\0\1\107\1\110"+
    "\66\0\1\111\103\0\23\112\3\0\36\113\1\114\2\113"+
    "\1\75\26\113\22\0\1\7\7\0\3\7\3\0\1\7"+
    "\1\0\13\7\1\115\7\7\2\0\1\7\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\10\7\1\116\1\7"+
    "\1\117\7\7\1\120\2\0\1\7\22\0\1\7\7\0"+
    "\3\7\3\0\1\7\1\0\1\121\11\7\1\122\10\7"+
    "\2\0\1\7\22\0\1\7\7\0\3\7\3\0\1\7"+
    "\1\0\11\7\1\123\1\124\10\7\2\0\1\7\22\0"+
    "\1\7\7\0\3\7\3\0\1\7\1\0\1\125\12\7"+
    "\1\126\7\7\2\0\1\7\22\0\1\7\7\0\3\7"+
    "\3\0\1\7\1\0\4\7\1\127\16\7\2\0\1\7"+
    "\22\0\1\7\7\0\3\7\3\0\1\7\1\0\20\7"+
    "\1\130\2\7\2\0\1\7\22\0\1\7\7\0\3\7"+
    "\3\0\1\7\1\0\12\7\1\131\10\7\2\0\1\7"+
    "\16\45\1\132\10\45\1\0\56\45\1\132\7\45\1\133"+
    "\1\0\40\45\7\47\1\134\6\47\1\135\10\47\1\74"+
    "\6\47\1\136\31\47\16\45\1\132\3\45\1\50\4\45"+
    "\1\0\2\45\3\50\3\45\1\50\1\45\23\50\21\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\4\50\1\137\2\50\1\140\13\50\21\45"+
    "\1\132\10\45\1\101\67\45\1\141\56\45\1\132\2\45"+
    "\1\142\5\45\1\0\56\45\1\132\7\45\1\143\1\0"+
    "\56\45\1\132\7\45\1\144\1\110\56\45\1\132\10\45"+
    "\1\0\15\45\1\145\1\146\7\45\1\147\1\45\1\150"+
    "\7\45\16\61\1\151\10\61\1\113\6\61\1\152\2\61"+
    "\1\45\26\61\16\45\1\132\3\45\1\50\4\45\1\0"+
    "\2\45\3\50\3\45\1\50\1\45\13\50\1\153\7\50"+
    "\21\45\1\132\3\45\1\50\4\45\1\0\2\45\3\50"+
    "\3\45\1\50\1\45\10\50\1\154\1\50\1\155\7\50"+
    "\1\156\21\45\1\132\3\45\1\50\4\45\1\0\2\45"+
    "\3\50\3\45\1\50\1\45\1\157\11\50\1\160\10\50"+
    "\21\45\1\132\3\45\1\50\4\45\1\0\2\45\3\50"+
    "\3\45\1\50\1\45\11\50\1\161\1\162\10\50\21\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\1\163\12\50\1\164\7\50\21\45\1\132"+
    "\3\45\1\50\4\45\1\0\2\45\3\50\3\45\1\50"+
    "\1\45\4\50\1\165\16\50\21\45\1\132\3\45\1\50"+
    "\4\45\1\0\2\45\3\50\3\45\1\50\1\45\20\50"+
    "\1\166\2\50\21\45\1\132\3\45\1\50\4\45\1\0"+
    "\2\45\3\50\3\45\1\50\1\45\12\50\1\167\10\50"+
    "\3\45\2\74\4\0\62\74\22\0\1\7\7\0\3\7"+
    "\3\0\1\7\1\0\12\7\1\170\10\7\2\0\1\7"+
    "\22\0\1\7\7\0\3\7\3\0\1\7\1\0\5\7"+
    "\1\171\15\7\2\0\1\7\13\0\1\172\54\0\2\102"+
    "\1\0\2\102\1\0\62\102\22\0\1\103\7\0\1\103"+
    "\7\0\6\103\17\0\1\103\2\113\4\0\62\113\22\0"+
    "\1\7\7\0\3\7\3\0\1\7\1\0\12\7\1\173"+
    "\10\7\2\0\1\7\22\0\1\7\7\0\3\7\3\0"+
    "\1\7\1\0\17\7\1\174\3\7\2\0\1\7\22\0"+
    "\1\7\7\0\3\7\3\0\1\7\1\0\21\7\1\175"+
    "\1\7\2\0\1\7\22\0\1\7\7\0\3\7\3\0"+
    "\1\7\1\0\20\7\1\176\2\7\2\0\1\7\22\0"+
    "\1\7\7\0\3\7\3\0\1\7\1\0\21\7\1\177"+
    "\1\7\2\0\1\7\22\0\1\7\7\0\3\7\3\0"+
    "\1\7\1\0\14\7\1\200\6\7\2\0\1\7\22\0"+
    "\1\7\7\0\3\7\3\0\1\7\1\0\10\7\1\201"+
    "\12\7\2\0\1\7\22\0\1\7\7\0\3\7\3\0"+
    "\1\7\1\0\2\7\1\202\20\7\2\0\1\7\22\0"+
    "\1\7\7\0\3\7\3\0\1\7\1\0\3\7\1\203"+
    "\17\7\2\0\1\7\22\0\1\7\7\0\3\7\3\0"+
    "\1\7\1\0\20\7\1\204\2\7\2\0\1\7\22\0"+
    "\1\7\7\0\3\7\3\0\1\7\1\0\16\7\1\205"+
    "\4\7\2\0\1\7\22\0\1\7\7\0\3\7\3\0"+
    "\1\7\1\0\7\7\1\206\13\7\2\0\1\7\27\45"+
    "\1\0\40\45\7\47\1\134\17\47\1\74\6\47\1\136"+
    "\33\47\4\45\10\47\1\135\10\47\1\74\40\47\16\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\12\50\1\207\10\50\21\45\1\132\3\45"+
    "\1\50\4\45\1\0\2\45\3\50\3\45\1\50\1\45"+
    "\5\50\1\210\15\50\3\45\2\142\1\45\2\142\1\45"+
    "\10\142\1\211\10\142\1\102\40\142\16\45\1\132\10\45"+
    "\1\0\16\45\1\212\37\45\1\132\10\45\1\0\24\45"+
    "\1\213\31\45\1\132\10\45\1\0\12\45\1\214\20\45"+
    "\1\215\22\45\1\132\10\45\1\0\16\45\1\216\21\45"+
    "\27\61\1\113\6\61\1\152\2\61\1\45\30\61\4\45"+
    "\10\61\1\151\10\61\1\113\40\61\16\45\1\132\3\45"+
    "\1\50\4\45\1\0\2\45\3\50\3\45\1\50\1\45"+
    "\12\50\1\217\10\50\21\45\1\132\3\45\1\50\4\45"+
    "\1\0\2\45\3\50\3\45\1\50\1\45\17\50\1\220"+
    "\3\50\21\45\1\132\3\45\1\50\4\45\1\0\2\45"+
    "\3\50\3\45\1\50\1\45\21\50\1\221\1\50\21\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\20\50\1\222\2\50\21\45\1\132\3\45"+
    "\1\50\4\45\1\0\2\45\3\50\3\45\1\50\1\45"+
    "\21\50\1\223\1\50\21\45\1\132\3\45\1\50\4\45"+
    "\1\0\2\45\3\50\3\45\1\50\1\45\14\50\1\224"+
    "\6\50\21\45\1\132\3\45\1\50\4\45\1\0\2\45"+
    "\3\50\3\45\1\50\1\45\10\50\1\225\12\50\21\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\2\50\1\226\20\50\21\45\1\132\3\45"+
    "\1\50\4\45\1\0\2\45\3\50\3\45\1\50\1\45"+
    "\3\50\1\227\17\50\21\45\1\132\3\45\1\50\4\45"+
    "\1\0\2\45\3\50\3\45\1\50\1\45\20\50\1\230"+
    "\2\50\21\45\1\132\3\45\1\50\4\45\1\0\2\45"+
    "\3\50\3\45\1\50\1\45\16\50\1\231\4\50\21\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\7\50\1\232\13\50\3\45\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\3\7\1\233\17\7"+
    "\2\0\1\7\22\0\1\7\7\0\3\7\3\0\1\7"+
    "\1\0\17\7\1\234\3\7\2\0\1\7\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\4\7\1\235\16\7"+
    "\2\0\1\7\22\0\1\7\7\0\3\7\3\0\1\7"+
    "\1\0\11\7\1\236\11\7\2\0\1\7\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\4\7\1\237\16\7"+
    "\2\0\1\7\22\0\1\7\7\0\3\7\3\0\1\7"+
    "\1\0\10\7\1\240\12\7\2\0\1\7\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\13\7\1\241\7\7"+
    "\2\0\1\7\22\0\1\7\7\0\3\7\3\0\1\7"+
    "\1\0\7\7\1\242\13\7\2\0\1\7\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\16\7\1\243\4\7"+
    "\2\0\1\7\22\0\1\7\7\0\3\7\3\0\1\7"+
    "\1\0\21\7\1\244\1\7\2\0\1\7\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\21\7\1\245\1\7"+
    "\2\0\1\7\22\0\1\7\7\0\3\7\3\0\1\7"+
    "\1\0\21\7\1\246\1\7\2\0\1\7\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\13\7\1\247\7\7"+
    "\2\0\1\7\16\45\1\132\3\45\1\50\4\45\1\0"+
    "\2\45\3\50\3\45\1\50\1\45\3\50\1\250\17\50"+
    "\3\45\2\142\1\45\2\142\1\45\21\142\1\102\40\142"+
    "\16\45\1\132\10\45\1\0\26\45\1\251\27\45\1\132"+
    "\10\45\1\0\31\45\1\252\24\45\1\132\10\45\1\0"+
    "\30\45\1\253\25\45\1\132\10\45\1\0\30\45\1\254"+
    "\25\45\1\132\10\45\1\0\27\45\1\255\2\45\1\256"+
    "\23\45\1\132\3\45\1\50\4\45\1\0\2\45\3\50"+
    "\3\45\1\50\1\45\17\50\1\257\3\50\21\45\1\132"+
    "\3\45\1\50\4\45\1\0\2\45\3\50\3\45\1\50"+
    "\1\45\4\50\1\260\16\50\21\45\1\132\3\45\1\50"+
    "\4\45\1\0\2\45\3\50\3\45\1\50\1\45\11\50"+
    "\1\261\11\50\21\45\1\132\3\45\1\50\4\45\1\0"+
    "\2\45\3\50\3\45\1\50\1\45\4\50\1\262\16\50"+
    "\21\45\1\132\3\45\1\50\4\45\1\0\2\45\3\50"+
    "\3\45\1\50\1\45\10\50\1\263\12\50\21\45\1\132"+
    "\3\45\1\50\4\45\1\0\2\45\3\50\3\45\1\50"+
    "\1\45\13\50\1\264\7\50\21\45\1\132\3\45\1\50"+
    "\4\45\1\0\2\45\3\50\3\45\1\50\1\45\7\50"+
    "\1\265\13\50\21\45\1\132\3\45\1\50\4\45\1\0"+
    "\2\45\3\50\3\45\1\50\1\45\16\50\1\266\4\50"+
    "\21\45\1\132\3\45\1\50\4\45\1\0\2\45\3\50"+
    "\3\45\1\50\1\45\21\50\1\267\1\50\21\45\1\132"+
    "\3\45\1\50\4\45\1\0\2\45\3\50\3\45\1\50"+
    "\1\45\21\50\1\270\1\50\21\45\1\132\3\45\1\50"+
    "\4\45\1\0\2\45\3\50\3\45\1\50\1\45\21\50"+
    "\1\271\1\50\21\45\1\132\3\45\1\50\4\45\1\0"+
    "\2\45\3\50\3\45\1\50\1\45\13\50\1\272\7\50"+
    "\3\45\22\0\1\7\7\0\3\7\3\0\1\7\1\0"+
    "\7\7\1\273\13\7\2\0\1\7\22\0\1\7\7\0"+
    "\3\7\3\0\1\7\1\0\20\7\1\274\2\7\2\0"+
    "\1\7\22\0\1\7\7\0\3\7\3\0\1\7\1\0"+
    "\16\7\1\275\4\7\2\0\1\7\22\0\1\7\7\0"+
    "\3\7\3\0\1\7\1\0\20\7\1\276\2\7\2\0"+
    "\1\7\22\0\1\7\7\0\3\7\3\0\1\7\1\0"+
    "\16\7\1\277\4\7\2\0\1\7\22\0\1\7\7\0"+
    "\3\7\3\0\1\7\1\0\12\7\1\300\10\7\2\0"+
    "\1\7\22\0\1\7\7\0\3\7\3\0\1\7\1\0"+
    "\13\7\1\301\7\7\2\0\1\7\22\0\1\7\7\0"+
    "\3\7\3\0\1\7\1\0\10\7\1\302\12\7\2\0"+
    "\1\7\22\0\1\7\7\0\3\7\3\0\1\7\1\0"+
    "\16\7\1\303\4\7\2\0\1\7\22\0\1\7\7\0"+
    "\3\7\3\0\1\7\1\0\2\7\1\304\20\7\2\0"+
    "\1\7\22\0\1\7\7\0\3\7\3\0\1\7\1\0"+
    "\12\7\1\305\10\7\2\0\1\7\16\45\1\132\3\45"+
    "\1\50\4\45\1\0\2\45\3\50\3\45\1\50\1\45"+
    "\7\50\1\306\13\50\21\45\1\132\10\45\1\0\30\45"+
    "\1\307\25\45\1\132\10\45\1\0\33\45\1\310\22\45"+
    "\1\132\10\45\1\0\12\45\1\311\43\45\1\132\10\45"+
    "\1\0\16\45\1\312\37\45\1\132\10\45\1\0\33\45"+
    "\1\313\22\45\1\132\10\45\1\0\33\45\1\314\22\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\20\50\1\315\2\50\21\45\1\132\3\45"+
    "\1\50\4\45\1\0\2\45\3\50\3\45\1\50\1\45"+
    "\16\50\1\316\4\50\21\45\1\132\3\45\1\50\4\45"+
    "\1\0\2\45\3\50\3\45\1\50\1\45\20\50\1\317"+
    "\2\50\21\45\1\132\3\45\1\50\4\45\1\0\2\45"+
    "\3\50\3\45\1\50\1\45\16\50\1\320\4\50\21\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\12\50\1\321\10\50\21\45\1\132\3\45"+
    "\1\50\4\45\1\0\2\45\3\50\3\45\1\50\1\45"+
    "\13\50\1\322\7\50\21\45\1\132\3\45\1\50\4\45"+
    "\1\0\2\45\3\50\3\45\1\50\1\45\10\50\1\323"+
    "\12\50\21\45\1\132\3\45\1\50\4\45\1\0\2\45"+
    "\3\50\3\45\1\50\1\45\16\50\1\324\4\50\21\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\2\50\1\325\20\50\21\45\1\132\3\45"+
    "\1\50\4\45\1\0\2\45\3\50\3\45\1\50\1\45"+
    "\12\50\1\326\10\50\3\45\22\0\1\7\7\0\3\7"+
    "\3\0\1\7\1\0\5\7\1\327\15\7\2\0\1\7"+
    "\22\0\1\7\7\0\3\7\3\0\1\7\1\0\12\7"+
    "\1\330\10\7\2\0\1\7\22\0\1\7\7\0\3\7"+
    "\3\0\1\7\1\0\3\7\1\331\17\7\2\0\1\7"+
    "\22\0\1\7\7\0\3\7\3\0\1\7\1\0\20\7"+
    "\1\332\2\7\2\0\1\7\22\0\1\7\7\0\3\7"+
    "\3\0\1\7\1\0\4\7\1\333\16\7\2\0\1\7"+
    "\22\0\1\7\7\0\3\7\3\0\1\7\1\0\4\7"+
    "\1\334\16\7\2\0\1\7\22\0\1\7\7\0\3\7"+
    "\3\0\1\7\1\0\12\7\1\335\10\7\2\0\1\7"+
    "\22\0\1\7\7\0\3\7\3\0\1\7\1\0\20\7"+
    "\1\336\2\7\2\0\1\7\16\45\1\132\3\45\1\50"+
    "\4\45\1\0\2\45\3\50\3\45\1\50\1\45\5\50"+
    "\1\337\15\50\21\45\1\132\10\45\1\0\16\45\1\340"+
    "\37\45\1\132\10\45\1\0\30\45\1\341\25\45\1\132"+
    "\10\45\1\0\23\45\1\342\32\45\1\132\10\45\1\0"+
    "\21\45\1\343\34\45\1\132\10\45\1\0\30\45\1\344"+
    "\25\45\1\132\3\45\1\50\4\45\1\0\2\45\3\50"+
    "\3\45\1\50\1\45\12\50\1\345\10\50\21\45\1\132"+
    "\3\45\1\50\4\45\1\0\2\45\3\50\3\45\1\50"+
    "\1\45\3\50\1\346\17\50\21\45\1\132\3\45\1\50"+
    "\4\45\1\0\2\45\3\50\3\45\1\50\1\45\20\50"+
    "\1\347\2\50\21\45\1\132\3\45\1\50\4\45\1\0"+
    "\2\45\3\50\3\45\1\50\1\45\4\50\1\350\16\50"+
    "\21\45\1\132\3\45\1\50\4\45\1\0\2\45\3\50"+
    "\3\45\1\50\1\45\4\50\1\351\16\50\21\45\1\132"+
    "\3\45\1\50\4\45\1\0\2\45\3\50\3\45\1\50"+
    "\1\45\12\50\1\352\10\50\21\45\1\132\3\45\1\50"+
    "\4\45\1\0\2\45\3\50\3\45\1\50\1\45\20\50"+
    "\1\353\2\50\3\45\22\0\1\7\7\0\3\7\3\0"+
    "\1\7\1\0\4\7\1\354\16\7\2\0\1\7\16\45"+
    "\1\132\10\45\1\0\14\45\1\355\41\45\1\132\10\45"+
    "\1\0\16\45\1\356\37\45\1\132\10\45\1\0\30\45"+
    "\1\357\25\45\1\132\10\45\1\0\24\45\1\360\31\45"+
    "\1\132\3\45\1\50\4\45\1\0\2\45\3\50\3\45"+
    "\1\50\1\45\4\50\1\361\16\50\3\45\22\0\1\7"+
    "\7\0\3\7\3\0\1\7\1\0\5\7\1\362\15\7"+
    "\2\0\1\7\16\45\1\132\10\45\1\0\12\45\1\363"+
    "\43\45\1\132\10\45\1\0\16\45\1\364\37\45\1\132"+
    "\3\45\1\50\4\45\1\0\2\45\3\50\3\45\1\50"+
    "\1\45\5\50\1\365\15\50\21\45\1\132\10\45\1\0"+
    "\32\45\1\366\23\45\1\132\10\45\1\0\16\45\1\367"+
    "\37\45\1\132\10\45\1\0\15\45\1\370\22\45";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10192];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\1\1\4\11\3\1\1\11"+
    "\3\1\1\11\1\1\2\11\11\1\2\11\25\1\2\11"+
    "\1\0\1\11\1\0\2\1\1\0\2\1\6\11\1\1"+
    "\2\0\15\1\1\0\2\1\1\0\3\1\1\11\7\1"+
    "\1\0\20\1\1\11\176\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  C3Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 56: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 57: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 58: break;
          case 4:
            { return IDENTIFIER;
            }
          // fall through
          case 59: break;
          case 5:
            { return AMPERSAND;
            }
          // fall through
          case 60: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 61: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 62: break;
          case 8:
            { return COMMA;
            }
          // fall through
          case 63: break;
          case 9:
            { return PERIOD;
            }
          // fall through
          case 64: break;
          case 10:
            { return INTEGER;
            }
          // fall through
          case 65: break;
          case 11:
            { return COLON;
            }
          // fall through
          case 66: break;
          case 12:
            { return SEMICOLON;
            }
          // fall through
          case 67: break;
          case 13:
            { return LT;
            }
          // fall through
          case 68: break;
          case 14:
            { return EQUALS;
            }
          // fall through
          case 69: break;
          case 15:
            { return GT;
            }
          // fall through
          case 70: break;
          case 16:
            { return FAULT;
            }
          // fall through
          case 71: break;
          case 17:
            { return LBRACKET;
            }
          // fall through
          case 72: break;
          case 18:
            { return RBRACKET;
            }
          // fall through
          case 73: break;
          case 19:
            { return LBRACE;
            }
          // fall through
          case 74: break;
          case 20:
            { return RBRACE;
            }
          // fall through
          case 75: break;
          case 21:
            { return TEXT;
            }
          // fall through
          case 76: break;
          case 22:
            { return PANIC;
            }
          // fall through
          case 77: break;
          case 23:
            { return NOT_EQUAL;
            }
          // fall through
          case 78: break;
          case 24:
            { return STRING;
            }
          // fall through
          case 79: break;
          case 25:
            { return LINE_COMMENT;
            }
          // fall through
          case 80: break;
          case 26:
            { return PATH_SEPARATOR;
            }
          // fall through
          case 81: break;
          case 27:
            { yybegin(DOC_COMMENT);
    return DOC_START;
            }
          // fall through
          case 82: break;
          case 28:
            { return LTE;
            }
          // fall through
          case 83: break;
          case 29:
            { return IS_EQUAL;
            }
          // fall through
          case 84: break;
          case 30:
            { return ARROW;
            }
          // fall through
          case 85: break;
          case 31:
            { return GTE;
            }
          // fall through
          case 86: break;
          case 32:
            { return ATTRIBUTE_NAME;
            }
          // fall through
          case 87: break;
          case 33:
            { return KW_FN;
            }
          // fall through
          case 88: break;
          case 34:
            { yybegin(YYINITIAL); return DOC_END;
            }
          // fall through
          case 89: break;
          case 35:
            { return KW_COMP_IF;
            }
          // fall through
          case 90: break;
          case 36:
            { return CHAR;
            }
          // fall through
          case 91: break;
          case 37:
            { return KW_COMP_ELSE;
            }
          // fall through
          case 92: break;
          case 38:
            { return KW_ENUM;
            }
          // fall through
          case 93: break;
          case 39:
            { return KW_CONST;
            }
          // fall through
          case 94: break;
          case 40:
            { return KW_MACRO;
            }
          // fall through
          case 95: break;
          case 41:
            { return KW_UNION;
            }
          // fall through
          case 96: break;
          case 42:
            { return KW_DOC_PURE;
            }
          // fall through
          case 97: break;
          case 43:
            { return KW_COMP_ENDIF;
            }
          // fall through
          case 98: break;
          case 44:
            { return KW_EXTERN;
            }
          // fall through
          case 99: break;
          case 45:
            { return KW_IMPORT;
            }
          // fall through
          case 100: break;
          case 46:
            { return KW_INLINE;
            }
          // fall through
          case 101: break;
          case 47:
            { return KW_MODULE;
            }
          // fall through
          case 102: break;
          case 48:
            { return KW_RETURN;
            }
          // fall through
          case 103: break;
          case 49:
            { return KW_STRUCT;
            }
          // fall through
          case 104: break;
          case 50:
            { return KW_DOC_PARAM;
            }
          // fall through
          case 105: break;
          case 51:
            { return KW_DOC_ENSURE;
            }
          // fall through
          case 106: break;
          case 52:
            { return KW_DOC_RETURN;
            }
          // fall through
          case 107: break;
          case 53:
            { return KW_FAULTDEF;
            }
          // fall through
          case 108: break;
          case 54:
            { return KW_DOC_REQUIRE;
            }
          // fall through
          case 109: break;
          case 55:
            { return KW_DOC_DEPRECATED;
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
